소스 코드와 명령어

개발자가 작성한 소스코드 -(변환)-> 명령어
고급언어 -(변환)-> 저급언어

저급언어
기계어 - 0과 1의 명령어 비트로 이루어진 언어
어셈블리어는 0과 1로 이루어진 기계어를 읽기 편한 형태로 번역한 언어스 코드와 명령어

개발자가 작성한 소스코드 -(변환)-> 명령어
고급언어 -(변환)-> 저급언어

저급언어
기계어 - 0과 1의 명령어 비트로 이루어진 언어
어셈블리어는 0과 1로 이루어진 기계어를 읽기 편한 형태로 번역한 언어

고급언어
컴파일 언어 -(컴파일)-> 저급 언어
인터프리터 언어 -(인터프리트)-> 저급 언어

컴파일언어
소스 코드 -> 컴파일러 -> 목적 코드
*컴파일 - 소스코드가 컴파일러에 의해 저급 언어로 변환하는 과정

인터프리트 언어
인터프리터에 의해 한줄씩 실행
소스 코드 전체를 저급 언어로 변환하는 시간을 기다릴 필요가 없음

컴파일 언어 vs 인터프리트 언어
소스 코드 컴파일 중 오류가 발생하면 소스 코드 전체가 실행되지 않음
소스 코드 인터프리트 중 오류가 발생하면 오류 발생 전까지의 코드는 실행

C언어 컴파일 과정
(test.c) -> 전처리기 -> (test.i) -> 컴파일러 -> (test.s) ->  어셈블러 -> (test.o) -> 링커 -> (test.exe)

전처리 과정
본격적으로 컴파일하기 전에 처리할 작업들
외부에 선언된 다양한 소스 코드, 라이브러리 포함(#include)
프로그래밍의 편의를 위해 작성된 매크로 변환 (#define)
컴파일할 영역 명시 (#if, #ifdef)

컴파일 과정
전처리가 완료 되어도 여전히 소스코드
전처리 완료된 소스 코드를 저급언어(어셈블리 언어)로 변환

어셈블 과정
어셈블리어를 기계어로 변환
목적 코드를 포함하는 목적 파일이 됨

목적 파일 vs 실행 파일
목적 파일과 실행 파일은 둘 다 기계어로 이루어진 파일
그러나 목적 파일과 실행 파일은 다르다
목적 파일은 링킹을 거친 이후에야 실행 파일이 된다
