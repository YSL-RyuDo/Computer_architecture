명령어의 구조

[명령어]
연산코드와 오퍼랜드로 구성
연산랜드(연산자) - 명령어가 수행할 연산
오퍼랜드(오퍼랜드) - 연산에 사용할 데이터 또는 연산에 사용할 데이터가 저장된 위치

오퍼랜드
명령어 안에 하나도 없을 수도 있고 한개 또는 여러개일 수 있다.
0-주소 명령어, 1-주소 명령어, 2-주소 명령어, 3-주소 명령어

연산코드
1. 데이터 전송
MOVE, STORE, LOAD, PUSH, POP
2. 산술/논리 연산
ADD, SUBTRACT, MULTIPLY, DIVIDE, INCREMENT, DECREMENT, AND, OR, NOT, COMPARE
3. 제어 흐름 변경
JUMP, CONDITONAL JUMP, HALT, CALL, RETURN
4. 입출력 제어
READ, WRITE, START IO, TEST IO

[주소 지정 방식]
왜 오퍼랜드 필드에 메모리나 레지스터의 주소를 담는 이유
-> 명령어의 길이 때문이다.
표현할 수 있는 명령어에 제한을 두지 않기 위해서이다.

유효주소 - 연산의 대상이 되는 데이터가 저장된 위치
주소지정방식 - 연산에 사용할 데이터 위치를 찾는 방법, 유효주소를 찾는법

즉시 주소 지정 방식
연산에 사용할 데이터를 오퍼랜드 필드에 직접 명시
가장 간단한 형태의 주소 지정 방식
연산에 사용할 데이터의 크기가 작아질 수 있지만 빠름


직접 주소 지정 방식
오퍼랜드 필드에 유효주소 직접적으로 명시
유효 주소를 표현할 수 있는 크기가 연산코드만큼 줄어든다.

간접 주소 지정방식
직접 주소 지정방식의 한계점을 고치기 위해서 등장하였다.
오퍼랜드 필드에 유효주소의 주소를 명시
앞선 주소 지정 방식들에 비해 속도가 느리다.

레지스터 주소 지정 방식
연산에 사용할 데이터가 저장된 레지스터 명시
메모리에 접근하는 속도보다 레지스터에 접근하는 것이 빠름

레지스터 간접 주소 지정방식
연산에 사용할 데이터를 메모리에 저장
그 주소를 저장한 레지스터를 오퍼랜드 필드에 명시

[스택과 큐]

스택 - 한쪽 끝이 막혀 있는 통과 같은 저장 공간
나중에 저장한 데이터를 가장 먼저 빼내는 데이터 관리 방식

큐 - 양쪽이 뚫려 있는 통과 같은 저장 공간
가장 먼저 저장된 데이터부터 빼내는 데이터 관리 방식
